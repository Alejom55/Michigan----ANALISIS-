<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Inicio</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates&family=Orbitron:wght@800&display=swap" rel="stylesheet">
  <script src="https://kit.fontawesome.com/3ab1775d52.js" crossorigin="anonymous"></script>
</head>
<style>
  .buttonx {
 position: relative;
 height: 50px;
 width: 100px;
 border: 2px solid #ffffff;
 background: #000000;
 user-select: none;
 white-space: nowrap;
 transition: all .05s linear;
 font-family: inherit;
 color: #F3FFF9;
}

.buttonx:before, .buttonx:after {
 content: "";
 position: absolute;
 background: #011522;
 transition: all .2s linear;
}

.buttonx:before {
 width: calc(100% + 6px);
 height: calc(100% - 16px);
 top: 8px;
 left: -3px;
}

.buttonx:after {
 width: calc(100% - 16px);
 height: calc(100% + 6px);
 top: -3px;
 left: 8px;
}

.buttonx:hover {
 cursor: crosshair;
}

.buttonx:active {
 transform: scale(0.95);
}

.buttonx:hover:before {
 height: calc(100% - 32px);
 top: 16px;
}

.buttonx:hover:after {
 width: calc(100% - 32px);
 left: 16px;
}

.buttonx span {
 font-size: 15px;
 z-index: 3;
 position: relative;
 font-weight: 600;
}
  .textarea {
 width: 500px;
 height: 254px;
 background: white;
 border-radius: 10px;
 transition: border-radius 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.shadow {
 box-shadow: inset 0 -3em 3em rgb(255, 0, 0),
             0 0  0 2px rgb(255, 0, 0),
             0.3em 0.3em 1em rgb(255, 0, 0);
}


  .input__container--variant {
  background: linear-gradient(to bottom, #F3FFF9, #F3FFF9);
  border-radius: 30px;
  width: 500px;


}

.shadow__input--variant {
  filter: blur(25px);
  border-radius: 30px;
  background-color: #F3FFF9;
  opacity: 0.5;
}

.input__button__shadow--variant {
  border-radius: 15px;
  background-color: #07372C;
  padding: 10px;
  border: none;
  width: 460px;
}

.input__button__shadow--variant:hover {
  background-color: #3C6659;
}

.input__search--variant {
  width: 470px;
  align-items: center;
  border-radius: 13em;
  outline: none;
  border: none;
  padding: 0.8em;
  font-size: 1.2em;
  color: #002019;
  background-color: transparent;
}

.input__search--variant::placeholder {
  color: #002019;
  opacity: 0.7;
}

.input__container--variant {
  background: linear-gradient(to bottom, #F3FFF9, #F3FFF9);
  border-radius: 1.5em;
  padding: 1em;
  box-shadow: 0em 1em 3em #beecdc64;
}


    /* Center the content in the card */
    .card__content {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

.card {
 width: 100%;
 height: 1000px;
 margin: 0 auto;
 background-color: #011522;
 z-index: 1;
}

.tools {
 display: flex;
 align-items: center;
 padding: 9px;
}

.circle {
 padding: 0 4px;
}

.box {
 display: inline-block;
 align-items: center;
 width: 10px;
 height: 10px;
 padding: 1px;
 border-radius: 50%;
}

.red {
 background-color: #ff605c;
}

.yellow {
 background-color: #ffbd44;
}

.green {
 background-color: #00ca4e;
}

</style>

<body>
  <div class="card">
    <div class="tools">
      <div class="circle">
        <span class="red box"></span>
      </div>
      <div class="circle">
        <span class="yellow box"></span>
      </div>
      <div class="circle">
        <span class="green box"></span>
      </div>
    </div>

      <div class="card__content">
        <div class="col-sm-4" style="margin-top: 100px; margin-left: 200px;">
          <h1 for="" style="color: azure;font-family: 'Orbitron', sans-serif;">Inserte su Endpoint</h1><br>
          <div class="input__container input__container--variant mt-4">
            <div class="shadow__input shadow__input--variant"></div>
            <input type="text" name="text" id="inputend" class="input__search input__search--variant" placeholder="Search...">
            <button class="input__button__shadow input__button__shadow--variant" id="endpoint">
              <svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" height="1.5em" width="13em">
                <path d="M4 9a5 5 0 1110 0A5 5 0 014 9zm5-7a7 7 0 104.2 12.6.999.999 0 00.093.107l3 3a1 1 0 001.414-1.414l-3-3a.999.999 0 00-.107-.093A7 7 0 009 2z" fill-rule="evenodd" fill="#FFF"></path>
              </svg>
            </button>
          </div>
        </div><br>

        <div class="col-sm-3" style="margin-left: 50px;">
          <select class="form-control" id="mi-select" style="display: none;background-color: #F3FFF9;">
            <br>
          <textarea class="mt-3 textarea shadow" id="textarea" cols="30" rows="10" style="display: none;"></textarea>

          </select>
          <div class="row px-2">
            <select class="form-control" id="sort" style="display: none;background-color: #F3FFF9; width: 200px;margin-left: 5px;">
              <option value="1">Bubblesort</option>
              <option value="2">Quicksort</option>
              <option value="3">Mergesort</option>
              <option value="4">Radixsort</option>
              <option value="5">Heapsort</option>
              <option value="6">Countsort</option>
            </select>
            <button id="calculo" class="buttonx" style="display: none; width: 100px;margin-left: 20px;"><span>Calcular</span></button>
          </div>
          <div class="row mt-4">
            <label id="timelabel" for="time" style="font-family: 'Orbitron', sans-serif;display: none;color: azure;" >Tiempo de Ejecución</label>
            <textarea class="mt-3 form-control" id="time" cols="10" rows="1" style="display: none;background-color: #F3FFF9;margin-left: 5px;" placeholder="Tiempo de ejecución"></textarea>
          </div>
        </div>


      </div>

  </div>

  <!-- Importa los scripts de Bootstrap -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.all.min.js"></script>
  <script>
    
    $("#inputend").on( "change", function() {
      var selectElement = document.getElementById("mi-select");
      selectElement.innerHTML = "";

    })
  
    $("#endpoint").on( "click", function() {
      $("#mi-select").fadeIn()
      $("#textarea").fadeIn()
      $.ajax({
        type: "GET",
        url: $("#inputend").val(),
        dataType: "text",
        success: function(data) {
          var rows = data.split("\n");
        var columns = rows[0].split(","); // Suponemos que la primera fila contiene los encabezados de las columnas

        var select = $("#mi-select");
        $.each(columns, function(index, column) {
          var columnValues = [];
          for (var i = 1; i < rows.length; i++) {
            var rowData = rows[i].split(",");
            columnValues.push(rowData[index]);
          }

          var option = $('<option></option>').val(columnValues.join(",")).html(column); // Asignamos los valores de la columna como valor de la opción
          select.append(option);
        });
      }
      });

    })
    
    $("#mi-select").on( "change", function() {

      var elementos = $("#mi-select").val().split(",");
      var lista = [];
      //console.log('ELEMENTOS', elementos)
      
      for (var i = 0; i < elementos.length; i++) {
        var elemento = elementos[i].trim().replace('"','').replace('"','');
      
        if (/^\d+$/.test(elemento)) {
          lista.push(parseInt(elemento));
        }
      }
      //  console.log(lista)
      $("#textarea").val(lista)
      if($("#textarea").val() != ''){
        $("#sort").fadeIn()
      }else{
        $("#sort").fadeOut()
        $("#calculo").fadeOut()
        $("#time").fadeOut()
        $("#timelabel").fadeOut()
      }
    })

  $("#sort").on( "change", function() {
    $("#calculo").fadeIn()
  })

  $("#calculo").on( "click", function() {
    $("#time").fadeIn()
    $("#timelabel").fadeIn()
    if($("#sort").val() == "1"){
      let lista = $("#textarea").val().split(",").map(function(item) {
      return parseInt(item.trim(), 10);
    });

    var startTime = performance.now();
    let sorted = bubbleSort(lista)
    var endTime = performance.now();
    var executionTime = endTime - startTime;

    $("#textarea").val(sorted)
    $("#time").val(executionTime)
    }else if($("#sort").val() == "2"){
      let lista = $("#textarea").val().split(",").map(function(item) {
      return parseInt(item.trim(), 10);
    });

    var startTime = performance.now();
    let sorted = quickSort(lista)
    var endTime = performance.now();
    var executionTime = endTime - startTime;

    $("#textarea").val(sorted)
    $("#time").val(executionTime)
    }else if($("#sort").val() == "3"){
      let lista = $("#textarea").val().split(",").map(function(item) {
      return parseInt(item.trim(), 10);
    });

    var startTime = performance.now();
    let sorted = mergeSort(lista)
    var endTime = performance.now();
    var executionTime = endTime - startTime;

    $("#textarea").val(sorted)
    $("#time").val(executionTime)
    }else if($("#sort").val() == "4"){
      let lista = $("#textarea").val().split(",").map(function(item) {
      return parseInt(item.trim(), 10);
    });

    var startTime = performance.now();
    let sorted = radixSort(lista)
    var endTime = performance.now();
    var executionTime = endTime - startTime;

    $("#textarea").val(sorted)
    $("#time").val(executionTime)
    }else if($("#sort").val() == "5"){
      let lista = $("#textarea").val().split(",").map(function(item) {
      return parseInt(item.trim(), 10);
    });

    var startTime = performance.now();
    let sorted = heapSort(lista)
    var endTime = performance.now();
    var executionTime = endTime - startTime;

    $("#textarea").val(sorted)
    $("#time").val(executionTime)
    }else if($("#sort").val() == "4"){
      let lista = $("#textarea").val().split(",").map(function(item) {
      return parseInt(item.trim(), 10);
    });

    var startTime = performance.now();
    let sorted = radixSort(lista)
    var endTime = performance.now();
    var executionTime = endTime - startTime;

    $("#textarea").val(sorted)
    $("#time").val(executionTime)
    }else if($("#sort").val() == "6"){
      let lista = $("#textarea").val().split(",").map(function(item) {
      return parseInt(item.trim(), 10);
    });

    var startTime = performance.now();
    let sorted = countSort(lista)
    var endTime = performance.now();
    var executionTime = endTime - startTime;

    $("#textarea").val(sorted)
    $("#time").val(executionTime)
    }

  })
  

function bubbleSort(arr) {
    const n = arr.length;  // O(1)

    for (let i = 0; i < n - 1; i++) {  // O(n)
        // Realizar el recorrido del arreglo y comparar elementos adyacentes
        for (let j = 0; j < n - i - 1; j++) {  // O(n)
            // Si el elemento actual es mayor que el siguiente, intercambiarlos
            if (arr[j] > arr[j + 1]) {  // O(1)
                const temp = arr[j];  // O(1)
                arr[j] = arr[j + 1];  // O(1)
                arr[j + 1] = temp;  // O(1)
            }
        }
    }

    return arr;  // O(1)
}

function quickSort(arr) {
    if (arr.length <= 1) {
        return arr;  // O(1)
    }

    const pivot = arr[arr.length - 1];  // O(1)

    const left = [];  // O(1)
    const right = [];  // O(1)
    for (let i = 0; i < arr.length - 1; i++) {  // O(n)
        if (arr[i] < pivot) {  // O(1)
            left.push(arr[i]);  // O(1)
        } else {
            right.push(arr[i]);  // O(1)
        }
    }

    const sortedLeft = quickSort(left);  // T(n/2)
    const sortedRight = quickSort(right);  // T(n/2)

    return [...sortedLeft, pivot, ...sortedRight];  // O(n)
}

function mergeSort(arr) {
    if (arr.length <= 1) {
        return arr;  // O(1)
    }

    const middle = Math.floor(arr.length / 2);  // O(1)
    const left = arr.slice(0, middle);  // O(n/2)
    const right = arr.slice(middle);  // O(n/2)

    const sortedLeft = mergeSort(left);  // T(n/2)
    const sortedRight = mergeSort(right);  // T(n/2)

    return merge(sortedLeft, sortedRight);  // O(n)
}

function merge(left, right) {
    const mergedArr = [];  // O(1)
    let leftIndex = 0;  // O(1)
    let rightIndex = 0;  // O(1)

    while (leftIndex < left.length && rightIndex < right.length) {  // O(n)
        if (left[leftIndex] < right[rightIndex]) {  // O(1)
            mergedArr.push(left[leftIndex]);  // O(1)
            leftIndex++;  // O(1)
        } else {
            mergedArr.push(right[rightIndex]);  // O(1)
            rightIndex++;  // O(1)
        }
    }

    while (leftIndex < left.length) {  // O(n)
        mergedArr.push(left[leftIndex]);  // O(1)
        leftIndex++;  // O(1)
    }

    while (rightIndex < right.length) {  // O(n)
        mergedArr.push(right[rightIndex]);  // O(1)
        rightIndex++;  // O(1)
    }

    return mergedArr;  // O(n)
}

function radixSort(arr) {
    const maxNum = Math.max(...arr);  // O(n)
    let exp = 1;  // O(1)

    while (Math.floor(maxNum / exp) > 0) {  // O(log n)
        countingSort(arr, exp);  // O(n)
        exp *= 10;  // O(1)
    }

    return arr;  // O(1)
}

function countingSort(arr, exp) {
    const n = arr.length;  // O(1)
    const output = new Array(n).fill(0);  // O(n)
    const count = new Array(10).fill(0);  // O(1)

    for (let i = 0; i < n; i++) {  // O(n)
        const digit = Math.floor(arr[i] / exp) % 10;  // O(1)
        count[digit]++;  // O(1)
    }

    for (let i = 1; i < 10; i++) {  // O(1)
        count[i] += count[i - 1];  // O(1)
    }

    for (let i = n - 1; i >= 0; i--) {  // O(n)
        const digit = Math.floor(arr[i] / exp) % 10;  // O(1)
        output[count[digit] - 1] = arr[i];  // O(1)
        count[digit]--;  // O(1)
    }

    for (let i = 0; i < n; i++) {  // O(n)
        arr[i] = output[i];  // O(1)
    }
}

function heapSort(arr) {
    const n = arr.length;  // O(1)

    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {  // O(n)
        heapify(arr, n, i);  // O(log n)
    }

    for (let i = n - 1; i > 0; i--) {  // O(n)
        const temp = arr[0];  // O(1)
        arr[0] = arr[i];  // O(1)
        arr[i] = temp;  // O(1)

        heapify(arr, i, 0);  // O(log n)
    }

    return arr;  // O(1)
}

function heapify(arr, n, i) {
    let largest = i;  // O(1)
    const left = 2 * i + 1;  // O(1)
    const right = 2 * i + 2;  // O(1)

    if (left < n && arr[left] > arr[largest]) {  // O(1)
        largest = left;  // O(1)
    }

    if (right < n && arr[right] > arr[largest]) {  // O(1)
        largest = right;  // O(1)
    }

    if (largest !== i) {  // O(1)
        const temp = arr[i];  // O(1)
        arr[i] = arr[largest];  // O(1)
        arr[largest] = temp;  // O(1)

        heapify(arr, n, largest);  // O(log n)
    }
}

function countSort(lista) {
    const min = Math.min(...lista);  // O(n)
    const max = Math.max(...lista);  // O(n)

    const rango = max - min + 1;  // O(1)

    const listaAux = new Array(rango).fill(0);  // O(rango)

    for (let i = 0; i < lista.length; i++) {  // O(n)
        listaAux[lista[i] - min]++;  // O(1)
    }

    let index = 0;  // O(1)
    for (let i = 0; i < listaAux.length; i++) {  // O(rango)
        while (listaAux[i] > 0) {  // O(n)
            lista[index] = i + min;  // O(1)
            listaAux[i]--;  // O(1)
            index++;  // O(1)
        }
    }

    return lista;  // O(1)
}

  </script>
</body>

</html>
